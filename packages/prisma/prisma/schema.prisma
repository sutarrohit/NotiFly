// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Google Authenticater
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  password                  String?
  userVerified              Boolean?        @default(false)
  passwordChangedAt         DateTime?
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  Notifications             Notifications[]

  @@unique([passwordResetToken])
  @@index([email])
  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum NotificationsType {
  Price
  Time
}

model Notifications {
  id               String             @id @default(uuid())
  targetPrice      Float
  token            String
  active           Boolean            @default(true)
  receiverEmail    String
  CreatedAt        DateTime
  uptrend          Boolean
  notificationType NotificationsType?
  DeliveredAt      DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map(name: "notifications")
}
